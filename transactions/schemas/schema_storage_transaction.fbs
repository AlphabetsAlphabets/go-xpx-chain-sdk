namespace Catapult.Buffers;

table PrepareDriveTransactionBuffer {
    size: uint;
    signature: [ubyte];
    signer: [ubyte];
    version: uint;
    type: ushort;
    maxFee: [uint];
    deadline:[uint];
    owner:[ubyte];
    duration:[uint];
    billingPeriod:[uint];
    billingPrice:[uint];
    driveSize:[uint];
    replicas:ushort;
    minReplicators:ushort;
    percentApprovers:ubyte;
}

table JoinToDriveTransactionBuffer {
    size: uint;
    signature: [ubyte];
    signer: [ubyte];
    version: uint;
    type: ushort;
    maxFee: [uint];
    deadline:[uint];
    driveKey:[ubyte];
}

table AddActionBuffer {
    fileHash: [ubyte];
    fileSize: [ubyte];
}

table RemoveActionBuffer {
    fileHash: [ubyte];
}

table FileBuffer {
    fileHash: [ubyte];
}

table UploadInfoBuffer {
    replicator: [ubyte];
    uploaded: [uint];
}

table DeletedFileBuffer {
    fileHash: [ubyte];
    size: uint;
    uploadInfos: [UploadInfoBuffer];
}

table DriveFileSystemTransactionBuffer {
    size: uint;
    signature: [ubyte];
    signer: [ubyte];
    version: uint;
    type: ushort;
    maxFee: [uint];
    deadline:[uint];
    driveKey: [ubyte];
    rootHash: [ubyte];
    xorRootHash: [ubyte];
    // It is ushort. But it can be zero, and we still want to represent it like 2 bytes
    addActionsCount: [ubyte];
    // It is ushort. But it can be zero, and we still want to represent it like 2 bytes
    removeActionsCount: [ubyte];
    addActions: [AddActionBuffer];
    removeActions: [RemoveActionBuffer];
}

table FilesDepositTransactionBuffer {
    size: uint;
    signature: [ubyte];
    signer: [ubyte];
    version: uint;
    type: ushort;
    maxFee: [uint];
    deadline:[uint];
    driveKey:[ubyte];
    filesCount: ushort;
    files: [FileBuffer];
}

table EndDriveTransactionBuffer {
    size: uint;
    signature: [ubyte];
    signer: [ubyte];
    version: uint;
    type: ushort;
    maxFee: [uint];
    deadline:[uint];
    driveKey: [ubyte];
}

table DeleteRewardTransactionBuffer {
    size: uint;
    signature: [ubyte];
    signer: [ubyte];
    version: uint;
    type: ushort;
    maxFee: [uint];
    deadline:[uint];
    deletedFiles: [DeletedFileBuffer];
}

table StartDriveVerificationTransactionBuffer {
    size: uint;
    signature: [ubyte];
    signer: [ubyte];
    version: uint;
    type: ushort;
    maxFee: [uint];
    deadline:[uint];
    driveKey: [ubyte];
}

table VerificationFailureBuffer {
    replicator: [ubyte];
    blockHash: [ubyte];
}

table EndDriveVerificationTransactionBuffer {
    size: uint;
    signature: [ubyte];
    signer: [ubyte];
    version: uint;
    type: ushort;
    maxFee: [uint];
    deadline:[uint];
    /// 2 bytes
    failureCount: [ubyte];
    failures: [VerificationFailureBuffer];
}

root_type AddActionBuffer;

root_type RemoveActionBuffer;

root_type FileBuffer;

root_type UploadInfoBuffer;

root_type DeletedFileBuffer;

root_type DriveFileSystemTransactionBuffer;

root_type EndDriveTransactionBuffer;

root_type DeleteRewardTransactionBuffer;

root_type FilesDepositTransactionBuffer;

root_type JoinToDriveTransactionBuffer;

root_type PrepareDriveTransactionBuffer;

root_type StartDriveVerificationTransactionBuffer;

root_type VerificationFailureBuffer;

root_type EndDriveVerificationTransactionBuffer;