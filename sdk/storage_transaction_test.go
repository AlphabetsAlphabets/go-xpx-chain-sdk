// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.

package sdk

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

var (
	prepareDriveTransactionSerializationCorr = []byte{0xbf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x64}

	prepareDriveTransactionToAggregateCorr = []byte{0x6f, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x41, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x64}

	prepareDriveTransactionSigningCorr = "BF000000FE56CEE4271402678BC90B114553F354A042BD5C95C3ECD34C5846848595E47C91E3E2C356D471E4E3EDF58E32CB0E9ED4A2F14B5EA957437E6BC2071ED15106CE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F207921010000905A41000000000000000000BAFD5600000000CE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F20792101000000000000000100000000000000010000000000000001000000000000000100010064"

	joinToDriveTransactionSerializationCorr = []byte{0x9a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27}

	joinToDriveTransactionToAggregateCorr = []byte{0x4a, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x42, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27}

	joinToDriveTransactionSigningCorr = "9A000000CF1075D3043255982F89529C20D101CF51BAFD7BAB167BA6D468F62EF282170A64E8BBA97BDC48F553B936A382417F7094E96E1D4E79D366E83ED65956EA4E0CCE02704FAB05D5BB8981397D563F7CC9312864F065195E3DB8E0847D9F207921010000905A42000000000000000000BAFD5600000000FC5CDB2478117F48BA0C1687178EF69C016BBA89D342C1ACD155E1F5AE0F4727"

	driveFileSystemTransactionSerializationCorr = []byte{0x2e, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	driveFileSystemTransactionToAggregateCorr = []byte{0xde, 0x0, 0x0, 0x0, 0xce, 0x2, 0x70, 0x4f, 0xab, 0x5, 0xd5, 0xbb, 0x89, 0x81, 0x39, 0x7d, 0x56, 0x3f, 0x7c, 0xc9, 0x31, 0x28, 0x64, 0xf0, 0x65, 0x19, 0x5e, 0x3d, 0xb8, 0xe0, 0x84, 0x7d, 0x9f, 0x20, 0x79, 0x21, 0x1, 0x0, 0x0, 0x90, 0x5a, 0x43, 0xfc, 0x5c, 0xdb, 0x24, 0x78, 0x11, 0x7f, 0x48, 0xba, 0xc, 0x16, 0x87, 0x17, 0x8e, 0xf6, 0x9c, 0x1, 0x6b, 0xba, 0x89, 0xd3, 0x42, 0xc1, 0xac, 0xd1, 0x55, 0xe1, 0xf5, 0xae, 0xf, 0x47, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	driveFileSystemTransactionSigningCorr
)

var testDriveOwner, _ = NewAccountFromPrivateKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest, &Hash{})
var testDrive, _ = NewAccountFromPrivateKey("AA49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest, &Hash{})

func TestPrepareDriveTransactionSerialization(t *testing.T) {
	tx, err := NewPrepareDriveTransaction(
		fakeDeadline,
		testDriveOwner.PublicAccount,
		Duration(1),
		Duration(1),
		Amount(1),
		StorageSize(1),
		uint16(1),
		uint16(1),
		uint8(100),
		MijinTest,
	)
	assert.Nilf(t, err, "NewPrepareDriveTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "PrepareDriveTransaction.Bytes returned error: %s", err)
	assert.Equal(t, prepareDriveTransactionSerializationCorr, b)
}

func TestPrepareDriveTransactionToAggregate(t *testing.T) {
	tx, err := NewPrepareDriveTransaction(
		fakeDeadline,
		testDriveOwner.PublicAccount,
		Duration(1),
		Duration(1),
		Amount(1),
		StorageSize(1),
		uint16(1),
		uint16(1),
		uint8(100),
		MijinTest,
	)
	assert.Nilf(t, err, "NewPrepareDriveTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, prepareDriveTransactionToAggregateCorr, b)
}

func TestPrepareDriveTransactionSigning(t *testing.T) {
	tx, err := NewPrepareDriveTransaction(
		fakeDeadline,
		testDriveOwner.PublicAccount,
		Duration(1),
		Duration(1),
		Amount(1),
		StorageSize(1),
		uint16(1),
		uint16(1),
		uint8(100),
		MijinTest,
	)
	assert.Nilf(t, err, "NewPrepareDriveTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, prepareDriveTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("e8b39596e4b85f48ed8fa9d04f32e162427f8bb823e7cb56a06c704fa5ce3bb1"), b.Hash)
}

func TestJoinToDriveTransactionSerialization(t *testing.T) {
	tx, err := NewJoinToDriveTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewJoinToDriveTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "JoinToDriveTransaction.Bytes returned error: %s", err)
	assert.Equal(t, joinToDriveTransactionSerializationCorr, b)
}

func TestJoinToDriveTransactionToAggregate(t *testing.T) {
	tx, err := NewJoinToDriveTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewJoinToDriveTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, joinToDriveTransactionToAggregateCorr, b)
}

func TestJoinToDriveTransactionSigning(t *testing.T) {
	tx, err := NewJoinToDriveTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		MijinTest,
	)
	assert.Nilf(t, err, "NewJoinToDriveTransaction returned error: %s", err)
	assert.Nilf(t, err, "NewJoinToDriveTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, joinToDriveTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("23b0b1570a69208379687ac48ed4d93520393b81645724f250fc172a8be14bf7"), b.Hash)
}

func TestDriveFileSystemTransactionSerialization(t *testing.T) {
	tx, err := NewDriveFileSystemTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		&Hash{0},
		&Hash{1},
		[]*Action{
			&Action{
				FileSize: 8,
				FileHash: &Hash{3},
			},
		},
		[]*Action{
			&Action{
				FileSize: 9,
				FileHash: &Hash{4},
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewDriveFileSystemTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "DriveFileSystemTransaction.Bytes returned error: %s", err)
	assert.Equal(t, driveFileSystemTransactionSerializationCorr, b)
}

func TestDriveFileSystemTransactionToAggregate(t *testing.T) {
	tx, err := NewDriveFileSystemTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		&Hash{0},
		&Hash{1},
		[]*Action{
			&Action{
				FileSize: 8,
				FileHash: &Hash{3},
			},
		},
		[]*Action{
			&Action{
				FileSize: 9,
				FileHash: &Hash{4},
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewDriveFileSystemTransaction returned error: %s", err)
	tx.Signer = testDriveOwner.PublicAccount

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, driveFileSystemTransactionToAggregateCorr, b)
}

func TestDriveFileSystemTransactionSigning(t *testing.T) {
	tx, err := NewDriveFileSystemTransaction(
		fakeDeadline,
		testDrive.PublicAccount,
		&Hash{0},
		&Hash{1},
		[]*Action{
			&Action{
				FileSize: 8,
				FileHash: &Hash{3},
			},
		},
		[]*Action{
			&Action{
				FileSize: 9,
				FileHash: &Hash{4},
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewDriveFileSystemTransaction returned error: %s", err)

	b, err := testDriveOwner.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, driveFileSystemTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("c44b25527afeffb67d35c19f37858d922f2926620b7b903409c4f0b9bf8d0952"), b.Hash)
}
