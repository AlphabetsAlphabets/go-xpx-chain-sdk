// Copyright 2022 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.

package sdk

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var (
	placeSdaExchangeOfferTransactionSerializationCorr = []byte{0xc3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x61, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x94, 0x64, 0x83, 0xc9, 0x7d, 0xad, 0x51, 0xac, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	placeSdaExchangeOfferTransactionToAggregateCorr = []byte{0x73, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x1, 0x0, 0x0, 0x90, 0x61, 0x41, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x94, 0x64, 0x83, 0xc9, 0x7d, 0xad, 0x51, 0xac, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	placeSdaExchangeOfferTransactionSigningCorr = "C3000000AF4F62D6C436CDD08D07C5E5FBB59AC91CA004807DF4116041C6737450499208B78E5C0D04CED9C99B53504B3DE27EBA4A5D1624742F4AC06CF72CD55191AF011026D70E1954775749C6811084D6450A3184D977383F0E4282CD47118AF37755010000906141000000000000000000BAFD56000000000105AB7F077B327B830200000000000000946483C97DAD51AC0A000000000000001026D70E1954775749C6811084D6450A3184D977383F0E4282CD47118AF377550100000000000000"

	removeSdaExchangeOfferTransactionSerializationCorr = []byte{0x8b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x61, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x94, 0x64, 0x83, 0xc9, 0x7d, 0xad, 0x51, 0xac}

	removeSdaExchangeOfferTransactionToAggregateCorr = []byte{0x3b, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x1, 0x0, 0x0, 0x90, 0x61, 0x42, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x94, 0x64, 0x83, 0xc9, 0x7d, 0xad, 0x51, 0xac}

	removeSdaExchangeOfferTransactionSigningCorr = "8B000000E097706843FA86427A8941117F585D6CC11089241197BCBA75E66C2FDCAD6812B3218CF361DD4F6D82608BB4EFED2CDB50120CF136D4C198618D10FBF58E0C021026D70E1954775749C6811084D6450A3184D977383F0E4282CD47118AF37755010000906142000000000000000000BAFD56000000000105AB7F077B327B83946483C97DAD51AC"
)

func TestPlaceSdaExchangeOfferTransactionSerialization(t *testing.T) {
	p, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	tx, err := NewPlaceSdaExchangeOfferTransaction(
		fakeDeadline,
		[]*PlaceSdaOffer{
			{
				SdaOffer: SdaOffer{
					MosaicGive: newMosaicPanic(StorageNamespaceId, Amount(2)),
					MosaicGet:  newMosaicPanic(StreamingNamespaceId, Amount(10)),
				},
				Owner:    p,
				Duration: Duration(1),
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewPlaceSdaExchangeOfferTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "NewPlaceSdaExchangeOfferTransaction.Bytes returned error: %s", err)
	assert.Equal(t, placeSdaExchangeOfferTransactionSerializationCorr, b)
}

func TestPlaceSdaExchangeOfferTransactionToAggregate(t *testing.T) {
	p, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	tx, err := NewPlaceSdaExchangeOfferTransaction(
		fakeDeadline,
		[]*PlaceSdaOffer{
			{
				SdaOffer: SdaOffer{
					MosaicGive: newMosaicPanic(StorageNamespaceId, Amount(2)),
					MosaicGet:  newMosaicPanic(StreamingNamespaceId, Amount(10)),
				},
				Owner:    p,
				Duration: Duration(1),
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewPlaceSdaExchangeOfferTransaction returned error: %s", err)
	tx.Signer = p

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, placeSdaExchangeOfferTransactionToAggregateCorr, b)
}

func TestPlaceSdaExchangeOfferTransactionSigning(t *testing.T) {
	acc, err := NewAccountFromPrivateKey("787225aaff3d2c71f4ffa32d4f19ec4922f3cd869747f267378f81f8e3fcb12d", MijinTest, GenerationHash)
	assert.Nil(t, err)

	tx, err := NewPlaceSdaExchangeOfferTransaction(
		fakeDeadline,
		[]*PlaceSdaOffer{
			{
				SdaOffer: SdaOffer{
					MosaicGive: newMosaicPanic(StorageNamespaceId, Amount(2)),
					MosaicGet:  newMosaicPanic(StreamingNamespaceId, Amount(10)),
				},
				Owner:    acc.PublicAccount,
				Duration: Duration(1),
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewPlaceSdaExchangeOfferTransaction returned error: %s", err)

	b, err := acc.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, placeSdaExchangeOfferTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("084f098d50812f125182b42cec030963953713ff60f042ea6d575c348b401285"), b.Hash)
}

func TestRemoveSdaExchangeOfferTransactionSerialization(t *testing.T) {
	tx, err := NewRemoveSdaExchangeOfferTransaction(
		fakeDeadline,
		[]*RemoveSdaOffer{
			{
				AssetIdGive: StorageNamespaceId,
				AssetIdGet:  StreamingNamespaceId,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewRemoveSdaExchangeOfferTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "NewRemoveSdaExchangeOfferTransaction.Bytes returned error: %s", err)
	assert.Equal(t, removeSdaExchangeOfferTransactionSerializationCorr, b)
}

func TestRemoveSdaExchangeOfferTransactionToAggregate(t *testing.T) {
	p, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)

	tx, err := NewRemoveSdaExchangeOfferTransaction(
		fakeDeadline,
		[]*RemoveSdaOffer{
			{
				AssetIdGive: StorageNamespaceId,
				AssetIdGet:  StreamingNamespaceId,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewRemoveSdaExchangeOfferTransaction returned error: %s", err)
	tx.Signer = p

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "NewRemoveSdaExchangeOfferTransaction returned error: %s", err)
	assert.Equal(t, removeSdaExchangeOfferTransactionToAggregateCorr, b)
}

func TestRemoveSdaExchangeOfferTransactionSigning(t *testing.T) {
	acc, err := NewAccountFromPrivateKey("787225aaff3d2c71f4ffa32d4f19ec4922f3cd869747f267378f81f8e3fcb12d", MijinTest, GenerationHash)
	assert.Nil(t, err)

	tx, err := NewRemoveSdaExchangeOfferTransaction(
		fakeDeadline,
		[]*RemoveSdaOffer{
			{
				AssetIdGive: StorageNamespaceId,
				AssetIdGet:  StreamingNamespaceId,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewRemoveSdaExchangeOfferTransaction returned error: %s", err)

	b, err := acc.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, removeSdaExchangeOfferTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("552fbe9a68eb7b403857f9205a22e485d5150d2e6913dba54997eac8c0eac724"), b.Hash)
}
